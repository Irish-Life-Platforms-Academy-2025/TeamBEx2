# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
- group: CWVariableGroup

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
            continueOnError: false

          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'TeamBDevopsSC'
              backendAzureRmResourceGroupName: '$(bk-rg-name)'
              backendAzureRmStorageAccountName: '$(bk-str-account-name)'
              backendAzureRmContainerName: '$(bk-container-name)'
              backendAzureRmKey: '$(bk-key)'
            continueOnError: false
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'custom'
              commandOptions: 'select -or-create $(env)'
              outputTo: 'console'
              customCommand: 'workspace'
              environmentServiceNameAzureRM: 'TeamBDevopsSC'            
          - script: echo "The value of Workspace is $(env)"
            displayName: 'Workspace'
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'TeamBDevopsSC'
              backendAzureRmResourceGroupName: '$(bk-rg-name)'
              backendAzureRmStorageAccountName: '$(bk-str-account-name)'
              backendAzureRmContainerName: '$(bk-container-name)'
              backendAzureRmKey: '$(bk-key)'              
          - script: |
              echo "The password for the VMs is: $(vm_password)"
            displayName: usevmpassword
            env:
              vm.password: $(vm_password)
          - script: | 
              echo "The password for sql is: $(sql_password)" 
            displayName: usesqlpassword
            env:
              sql.password: $(sql_password)
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'custom'
              commandOptions: 'select -or-create dev'
              outputTo: 'console'
              customCommand: 'workspace'
              environmentServiceNameAzureRM: 'TeamBDevopsSC'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'TeamBDevopsSC'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                 az account show 
                
          - script: |
              terraform plan -var "vm_password=$(vm_password)" -var "sql_password=$(sql_password)"
            env:
              vm_password: $(vm_password)
              sql_password: $(sql_password)
            workingDirectory: '$(System.DefaultWorkingDirectory)'

          - script: |
             terraform apply -auto-approve -var "vm_password=$(vm_password)" -var "sql_password=$(sql_password)"
            env:
              vm_password: $(vm_password)
              sql_password: $(sql_password)
            workingDirectory: '$(System.DefaultWorkingDirectory)' 
                    
          